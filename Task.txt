import java.util.Scanner;

class Task {
    String name;
    int priority;

    public Task(String name, int priority) {
        this.name = name;
        this.priority = priority;
    }
}

class Heap {
    Task[] heap;
    int size;

    public Heap(int capacity) {
        heap = new Task[capacity];
        size = 0;
    }

    // Add task to heap
    public void add(Task task) {
        if (size == heap.length) {
            System.out.println("Heap is full!");
            return;
        }
        heap[size] = task;
        bubbleUp(size);
        size++;
    }

    // Remove highest-priority task
    public Task remove() {
        if (size == 0) {
            System.out.println("Heap is empty!");
            return null;
        }
        Task removed = heap[0];
        heap[0] = heap[size - 1];
        bubbleDown(0);
        size--;
        return removed;
    }

    // View tasks in priority order
    public void view() {
        for (int i = 0; i < size; i++) {
            System.out.println(heap[i].name + " (Priority: " + heap[i].priority + ")");
        }
    }

    // Bubble up task to maintain heap property
    private void bubbleUp(int index) {
        int parentIndex = (index - 1) / 2;
        if (index > 0 && heap[parentIndex].priority < heap[index].priority) {
            swap(parentIndex, index);
            bubbleUp(parentIndex);
        }
    }

    // Bubble down task to maintain heap property
    private void bubbleDown(int index) {
        int leftChildIndex = 2 * index + 1;
        int rightChildIndex = 2 * index + 2;
        int largestIndex = index;

        if (leftChildIndex < size && heap[leftChildIndex].priority > heap[largestIndex].priority) {
            largestIndex = leftChildIndex;
        }

        if (rightChildIndex < size && heap[rightChildIndex].priority > heap[largestIndex].priority) {
            largestIndex = rightChildIndex;
        }

        if (largestIndex != index) {
            swap(largestIndex, index);
            bubbleDown(largestIndex);
        }
    }

    // Swap tasks
    private void swap(int i, int j) {
        Task temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }
}

public class PriorityTaskManager {
    public static void main(String[] args) {
        Heap heap = new Heap(10);
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Add task");
            System.out.println("2. View tasks");
            System.out.println("3. Delete task");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            switch (option) {
                case 1:
                    System.out.print("Enter task name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter priority (1-3): ");
                    int priority = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                    heap.add(new Task(name, priority));
                    break;
                case 2:
                    heap.view();
                    break;
                case 3:
                    Task removed = heap.remove();
                    if (removed != null) {
                        System.out.println("Removed task: " + removed.name);
                    }
                    break;
                case 4:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option!");
            }
        }
    }
}
